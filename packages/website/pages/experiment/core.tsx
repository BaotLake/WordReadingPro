import {
    MouseEventHandler,
    useEffect,
    useRef,
    KeyboardEventHandler,
    UIEventHandler,
} from 'react'

import {
    getTargetByPoint,
    extractSentenceRange,
    extractWordRange,
} from '@wrp/core'

let html = `<script>
(function() {

  let hasLocalStorage = false
  try {
    hasLocalStorage = typeof localStorage !== "undefined"
  } catch (error) {}

  const systemIsDark = typeof window !== 'undefined' && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
  const hasSetColorTheme = hasLocalStorage && localStorage.getItem("force-color-theme")
  const customThemeOverride = hasLocalStorage && localStorage.getItem("force-color-theme")

  if (!hasSetColorTheme && systemIsDark) {
    document.documentElement.classList.add("dark-theme")
  } else if (customThemeOverride) {
    document.documentElement.classList.add(customThemeOverride.replace("force-", "") + "-theme")
  }

  const customFontOverride = hasLocalStorage && localStorage.getItem("force-font") || "cascadia"
  document.documentElement.classList.add('font-' + customFontOverride)
})()
  </script><div id="___gatsby"><div style="outline:none" tabindex="-1" id="gatsby-focus-wrapper"><div class="ms-Fabric"><div id="cookie-banner"></div><header dir="ltr"><a class="skip-to-main" href="#site-content" tabindex="0">Skip to main content</a><div id="top-menu" class="up"><div class="left below-small"><a id="home-page-logo" aria-label="TypeScript Home Page" href="/"><svg fill="none" height="26" viewBox="0 0 27 26" width="27" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m.98608 0h24.32332c.5446 0 .9861.436522.9861.975v24.05c0 .5385-.4415.975-.9861.975h-24.32332c-.544597 0-.98608-.4365-.98608-.975v-24.05c0-.538478.441483-.975.98608-.975zm13.63142 13.8324v-2.1324h-9.35841v2.1324h3.34111v9.4946h2.6598v-9.4946zm1.0604 9.2439c.4289.2162.9362.3784 1.5218.4865.5857.1081 1.2029.1622 1.8518.1622.6324 0 1.2331-.0595 1.8023-.1784.5691-.1189 1.0681-.3149 1.497-.5879s.7685-.6297 1.0187-1.0703.3753-.9852.3753-1.6339c0-.4703-.0715-.8824-.2145-1.2365-.1429-.3541-.3491-.669-.6186-.9447-.2694-.2757-.5925-.523-.9692-.7419s-.8014-.4257-1.2743-.6203c-.3465-.1406-.6572-.2771-.9321-.4095-.275-.1324-.5087-.2676-.7011-.4054-.1925-.1379-.3409-.2838-.4454-.4379-.1045-.154-.1567-.3284-.1567-.523 0-.1784.0467-.3392.1402-.4824.0935-.1433.2254-.2663.3959-.369s.3794-.1824.6269-.2392c.2474-.0567.5224-.0851.8248-.0851.22 0 .4523.0162.697.0486.2447.0325.4908.0825.7382.15.2475.0676.4881.1527.7218.2555.2337.1027.4495.2216.6475.3567v-2.4244c-.4015-.1514-.84-.2636-1.3157-.3365-.4756-.073-1.0214-.1095-1.6373-.1095-.6268 0-1.2207.0662-1.7816.1987-.5609.1324-1.0544.3392-1.4806.6203s-.763.6392-1.0104 1.0743c-.2475.4352-.3712.9555-.3712 1.5609 0 .7731.2268 1.4326.6805 1.9785.4537.546 1.1424 1.0082 2.0662 1.3866.363.146.7011.2892 1.0146.4298.3134.1405.5842.2865.8124.4378.2282.1514.4083.3162.5403.4946s.198.3811.198.6082c0 .1676-.0413.323-.1238.4662-.0825.1433-.2076.2676-.3753.373s-.3766.1879-.6268.2473c-.2502.0595-.5431.0892-.8785.0892-.5719 0-1.1383-.0986-1.6992-.2959-.5608-.1973-1.0805-.4933-1.5589-.8879z" fill="#fff" fill-rule="evenodd"></path></svg><span class="hide-small">TypeScript</span></a><nav role="navigation"><ul><li class="nav-item hide-small"><a href="/download">Download</a></li><li class="nav-item"><a href="/docs/"><span>Docs</span></a></li><li class="nav-item show-only-large"><a href="/docs/handbook/intro.html">Handbook</a></li><li class="nav-item"><a href="/community">Community</a></li><li class="nav-item show-only-largest"><a to="/play" href="/play">Playground</a></li><li class="nav-item"><a href="/tools">Tools</a></li></ul></nav></div><div class="right above-small"><div class="search-section"><ul><li id="my-lang-quick-jump" style="display:none" class="nav-item"><a href="">in En</a></li><li class="nav-item"><form id="search-form" class="search top-nav search-enabled" role="search"><svg fill="none" height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m10.5 0c.5052 0 .9922.0651042 1.4609.195312.4688.130209.9063.315105 1.3125.554688.4063.239583.7761.52865 1.1094.86719.3386.33333.6276.70312.8672 1.10937s.4245.84375.5547 1.3125.1953.95573.1953 1.46094-.0651.99219-.1953 1.46094-.3151.90625-.5547 1.3125-.5286.77864-.8672 1.11718c-.3333.33334-.7031.61978-1.1094.85938-.4062.2396-.8437.4245-1.3125.5547-.4687.1302-.9557.1953-1.4609.1953-.65104 0-1.27604-.1094-1.875-.3281-.59375-.2188-1.14062-.5339-1.64062-.94534l-6.132818 6.12504c-.098958.0989-.216145.1484-.351562.1484s-.252604-.0495-.351562-.1484c-.0989588-.099-.148438-.2162-.148438-.3516s.0494792-.2526.148438-.3516l6.125002-6.13278c-.41146-.5-.72656-1.04687-.94532-1.64062-.21874-.59896-.32812-1.22396-.32812-1.875 0-.50521.0651-.99219.19531-1.46094s.31511-.90625.55469-1.3125.52604-.77604.85938-1.10937c.33854-.33854.71093-.627607 1.11718-.86719s.84375-.424479 1.3125-.554688c.46875-.1302078.95573-.195312 1.46094-.195312zm0 10c.6198 0 1.2031-.11719 1.75-.35156.5469-.23959 1.0234-.5625 1.4297-.96875.4062-.40625.7265-.88281.9609-1.42969.2396-.54688.3594-1.13021.3594-1.75s-.1198-1.20312-.3594-1.75c-.2344-.54688-.5547-1.02344-.9609-1.42969-.4063-.40625-.8828-.72656-1.4297-.96093-.5469-.23959-1.1302-.35938-1.75-.35938-.61979 0-1.20312.11979-1.75.35938-.54688.23437-1.02344.55468-1.42969.96093s-.72916.88281-.96875 1.42969c-.23437.54688-.35156 1.13021-.35156 1.75s.11719 1.20312.35156 1.75c.23959.54688.5625 1.02344.96875 1.42969s.88281.72916 1.42969.96875c.54688.23437 1.13021.35156 1.75.35156z" fill="#fff"></path></svg><span><span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;"><input type="search" id="search-box-top" placeholder="Search Docs" aria-label="Search the TypeScript site" class="ds-input" autocomplete="off" spellcheck="false" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-owns="algolia-autocomplete-listbox-0" dir="auto" style="position: relative; vertical-align: top;"><pre aria-hidden="true" style="position: absolute; visibility: hidden; white-space: pre; font-family: &quot;Segoe UI Web (West European)&quot;, &quot;Segoe UI&quot;, -apple-system, system-ui, Roboto, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 600; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre><span class="ds-dropdown-menu" role="listbox" id="algolia-autocomplete-listbox-0" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;"><div class="ds-dataset-1"></div></span></span></span><input type="submit" style="display:none"></form></li></ul></div></div></div><div id="site-content"></div></header><main role="main"><section id="doc-layout"><button id="small-device-button-sidebar" class=""><svg fill="none" height="26" viewBox="0 0 26 26" width="26" xmlns="http://www.w3.org/2000/svg"><g fill="#fff"><path d="m0 1c0-.552285.447715-1 1-1h24c.5523 0 1 .447715 1 1v3h-26z"></path><path d="m0 11h13 13v4h-26z"></path><path d="m0 22h26v3c0 .5523-.4477 1-1 1h-24c-.552284 0-1-.4477-1-1z"></path></g></svg></button><div class="page-popup" id="page-helpful-popup" style="opacity:0"><p>Was this page helpful?</p><div><button class="first" id="like-button-popup"><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.052 2.29429C10.3913 1.31699 11.6841 0.866721 12.4829 1.70385C12.6455 1.87427 12.8081 2.05843 12.9176 2.22265C13.2379 2.70316 13.3725 3.33595 13.4218 3.95232C13.4721 4.58045 13.438 5.25457 13.3738 5.86484C13.3093 6.47746 13.2129 7.03959 13.1328 7.44777C13.1294 7.46547 13.1259 7.48288 13.1225 7.5H14.006C15.8777 7.5 17.2924 9.19514 16.9576 11.0367L16.2737 14.7984C15.8017 17.3943 13.2078 19.0291 10.6622 18.3348L5.06251 16.8076C4.14894 16.5585 3.45455 15.8145 3.26885 14.886L2.91581 13.1208C2.63809 11.7322 3.69991 10.5624 4.82905 10.1161C5.15163 9.98861 5.44337 9.82679 5.66974 9.62597C7.37583 8.11245 7.99442 6.90287 9.05406 4.77695C9.4084 4.06605 9.77205 3.10054 10.052 2.29429ZM12.0165 7.87862L12.0169 7.87707L12.0187 7.86973L12.0262 7.83863C12.0328 7.81079 12.0426 7.76903 12.0549 7.71494C12.0793 7.60669 12.1135 7.4493 12.1515 7.25536C12.2277 6.86666 12.3188 6.33504 12.3793 5.76016C12.4401 5.18293 12.4685 4.5758 12.425 4.03206C12.3806 3.47655 12.2652 3.04684 12.0855 2.77735C12.0264 2.6887 11.9138 2.55604 11.7594 2.39421C11.5605 2.18576 11.1314 2.23428 10.9967 2.62228C10.7141 3.43609 10.3334 4.45194 9.94904 5.22305C8.88216 7.36349 8.19326 8.72408 6.33336 10.374C5.99304 10.6759 5.58878 10.8911 5.19665 11.0461C4.31631 11.3941 3.75035 12.1945 3.89639 12.9247L4.24943 14.6899C4.36085 15.247 4.77748 15.6934 5.32562 15.8428L10.9254 17.3701C12.9052 17.91 14.9227 16.6385 15.2898 14.6195L15.9738 10.8578C16.197 9.63009 15.2538 8.5 14.006 8.5H12.5015C12.3476 8.5 12.2022 8.42906 12.1074 8.30771C12.0127 8.18638 11.9792 8.02796 12.0165 7.87862C12.0165 7.87858 12.0165 7.87866 12.0165 7.87862Z"></path></svg></button><button id="dislike-button-popup"><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.052 17.7057C10.3913 18.683 11.6841 19.1333 12.4829 18.2962C12.6455 18.1257 12.8081 17.9416 12.9176 17.7773C13.2379 17.2968 13.3725 16.664 13.4218 16.0477C13.4721 15.4195 13.438 14.7454 13.3738 14.1352C13.3093 13.5225 13.2129 12.9604 13.1328 12.5522C13.1294 12.5345 13.1259 12.5171 13.1225 12.5H14.006C15.8777 12.5 17.2924 10.8049 16.9576 8.96334L16.2737 5.20164C15.8017 2.60569 13.2078 0.970948 10.6622 1.66518L5.06251 3.19238C4.14894 3.44154 3.45455 4.18546 3.26885 5.11401L2.91581 6.87918C2.63809 8.26779 3.69991 9.43756 4.82905 9.88388C5.15163 10.0114 5.44337 10.1732 5.66974 10.374C7.37583 11.8875 7.99442 13.0971 9.05406 15.223C9.4084 15.9339 9.77205 16.8995 10.052 17.7057ZM12.0165 12.1214L12.0169 12.1229L12.0187 12.1303L12.0262 12.1614C12.0328 12.1892 12.0426 12.231 12.0549 12.2851C12.0793 12.3933 12.1135 12.5507 12.1515 12.7446C12.2277 13.1333 12.3188 13.665 12.3793 14.2398C12.4401 14.8171 12.4685 15.4242 12.425 15.9679C12.3806 16.5234 12.2652 16.9532 12.0855 17.2226C12.0264 17.3113 11.9138 17.444 11.7594 17.6058C11.5605 17.8142 11.1314 17.7657 10.9967 17.3777C10.7141 16.5639 10.3334 15.5481 9.94904 14.777C8.88216 12.6365 8.19326 11.2759 6.33336 9.62597C5.99304 9.32406 5.58878 9.1089 5.19665 8.9539C4.31631 8.60592 3.75035 7.80549 3.89639 7.0753L4.24943 5.31012C4.36085 4.753 4.77748 4.30664 5.32562 4.15715L10.9254 2.62995C12.9052 2.08999 14.9227 3.36145 15.2898 5.38052L15.9738 9.14222C16.197 10.3699 15.2538 11.5 14.006 11.5H12.5015C12.3476 11.5 12.2022 11.5709 12.1074 11.6923C12.0127 11.8136 11.9792 11.972 12.0165 12.1214C12.0165 12.1214 12.0165 12.1213 12.0165 12.1214Z"></path></svg></button></div></div><noscript><style>
          nav#sidebar > ul > li.closed ul {
            display: block !important;
           }
        </style></noscript><nav id="sidebar"><ul><li class="closed"><button aria-label="Get Started expand">Get Started<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/typescript-from-scratch.html">TS for the New Programmer</a></li><li><a href="/docs/handbook/typescript-in-5-minutes.html">TypeScript for JS Programmers</a></li><li><a href="/docs/handbook/typescript-in-5-minutes-oop.html">TS for Java/C# Programmers</a></li><li><a href="/docs/handbook/typescript-in-5-minutes-func.html">TS for Functional Programmers</a></li><li><a href="/docs/handbook/typescript-tooling-in-5-minutes.html">TypeScript Tooling in 5 minutes</a></li></ul></li><li class="open highlighted"><button aria-expanded="true" aria-label="Handbook close">Handbook<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/intro.html">The TypeScript Handbook</a></li><li><a href="/docs/handbook/2/basic-types.html">The Basics</a></li><li><a href="/docs/handbook/2/everyday-types.html">Everyday Types</a></li><li><a href="/docs/handbook/2/narrowing.html">Narrowing</a></li><li><a href="/docs/handbook/2/functions.html">More on Functions</a></li><li><a href="/docs/handbook/2/objects.html">Object Types</a></li><li class="open highlighted"><button aria-expanded="true" aria-label="Type Manipulation close">Type Manipulation<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/2/types-from-types.html">Creating Types from Types</a></li><li><a href="/docs/handbook/2/generics.html">Generics</a></li><li><a href="/docs/handbook/2/keyof-types.html">Keyof Type Operator</a></li><li><a href="/docs/handbook/2/typeof-types.html">Typeof Type Operator</a></li><li><a href="/docs/handbook/2/indexed-access-types.html">Indexed Access Types</a></li><li aria-current="page" class="highlight"><a aria-current="page" class="" href="/docs/handbook/2/conditional-types.html">Conditional Types</a></li><li><a href="/docs/handbook/2/mapped-types.html">Mapped Types</a></li><li><a href="/docs/handbook/2/template-literal-types.html">Template Literal Types</a></li></ul></li><li><a href="/docs/handbook/2/classes.html">Classes</a></li><li><a href="/docs/handbook/2/modules.html">Modules</a></li></ul></li><li class="closed"><button aria-label="Reference expand">Reference<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/utility-types.html">Utility Types</a></li><li><a href="/docs/handbook/decorators.html">Decorators</a></li><li><a href="/docs/handbook/declaration-merging.html">Declaration Merging</a></li><li><a href="/docs/handbook/enums.html">Enums</a></li><li><a href="/docs/handbook/iterators-and-generators.html">Iterators and Generators</a></li><li><a href="/docs/handbook/jsx.html">JSX</a></li><li><a href="/docs/handbook/mixins.html">Mixins</a></li><li><a href="/docs/handbook/modules.html">Modules</a></li><li><a href="/docs/handbook/module-resolution.html">Module Resolution</a></li><li><a href="/docs/handbook/namespaces.html">Namespaces</a></li><li><a href="/docs/handbook/namespaces-and-modules.html">Namespaces and Modules</a></li><li><a href="/docs/handbook/symbols.html">Symbols</a></li><li><a href="/docs/handbook/triple-slash-directives.html">Triple-Slash Directives</a></li><li><a href="/docs/handbook/type-compatibility.html">Type Compatibility</a></li><li><a href="/docs/handbook/type-inference.html">Type Inference</a></li><li><a href="/docs/handbook/variable-declarations.html">Variable Declaration</a></li></ul></li><li class="closed"><button aria-label="Tutorials expand">Tutorials<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/asp-net-core.html">ASP.NET Core</a></li><li><a href="/docs/handbook/gulp.html">Gulp</a></li><li><a href="/docs/handbook/dom-manipulation.html">DOM Manipulation</a></li><li><a href="/docs/handbook/migrating-from-javascript.html">Migrating from JavaScript</a></li><li><a href="/docs/handbook/babel-with-typescript.html">Using Babel with TypeScript</a></li></ul></li><li class="closed"><button aria-label="What's New expand">What's New<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/release-notes/overview.html">Overview</a></li><li><a href="/docs/handbook/release-notes/typescript-4-2.html">TypeScript 4.2</a></li><li><a href="/docs/handbook/release-notes/typescript-4-1.html">TypeScript 4.1</a></li><li><a href="/docs/handbook/release-notes/typescript-4-0.html">TypeScript 4.0</a></li><li><a href="/docs/handbook/release-notes/typescript-3-9.html">TypeScript 3.9</a></li><li><a href="/docs/handbook/release-notes/typescript-3-8.html">TypeScript 3.8</a></li><li><a href="/docs/handbook/release-notes/typescript-3-7.html">TypeScript 3.7</a></li><li><a href="/docs/handbook/release-notes/typescript-3-6.html">TypeScript 3.6</a></li><li><a href="/docs/handbook/release-notes/typescript-3-5.html">TypeScript 3.5</a></li><li><a href="/docs/handbook/release-notes/typescript-3-4.html">TypeScript 3.4</a></li><li><a href="/docs/handbook/release-notes/typescript-3-3.html">TypeScript 3.3</a></li><li><a href="/docs/handbook/release-notes/typescript-3-2.html">TypeScript 3.2</a></li><li><a href="/docs/handbook/release-notes/typescript-3-1.html">TypeScript 3.1</a></li><li><a href="/docs/handbook/release-notes/typescript-3-0.html">TypeScript 3.0</a></li><li><a href="/docs/handbook/release-notes/typescript-2-9.html">TypeScript 2.9</a></li><li><a href="/docs/handbook/release-notes/typescript-2-8.html">TypeScript 2.8</a></li><li><a href="/docs/handbook/release-notes/typescript-2-7.html">TypeScript 2.7</a></li><li><a href="/docs/handbook/release-notes/typescript-2-6.html">TypeScript 2.6</a></li><li><a href="/docs/handbook/release-notes/typescript-2-5.html">TypeScript 2.5</a></li><li><a href="/docs/handbook/release-notes/typescript-2-4.html">TypeScript 2.4</a></li><li><a href="/docs/handbook/release-notes/typescript-2-3.html">TypeScript 2.3</a></li><li><a href="/docs/handbook/release-notes/typescript-2-2.html">TypeScript 2.2</a></li><li><a href="/docs/handbook/release-notes/typescript-2-1.html">TypeScript 2.1</a></li><li><a href="/docs/handbook/release-notes/typescript-2-0.html">TypeScript 2.0</a></li><li><a href="/docs/handbook/release-notes/typescript-1-8.html">TypeScript 1.8</a></li><li><a href="/docs/handbook/release-notes/typescript-1-7.html">TypeScript 1.7</a></li><li><a href="/docs/handbook/release-notes/typescript-1-6.html">TypeScript 1.6</a></li><li><a href="/docs/handbook/release-notes/typescript-1-5.html">TypeScript 1.5</a></li><li><a href="/docs/handbook/release-notes/typescript-1-4.html">TypeScript 1.4</a></li><li><a href="/docs/handbook/release-notes/typescript-1-3.html">TypeScript 1.3</a></li><li><a href="/docs/handbook/release-notes/typescript-1-1.html">TypeScript 1.1</a></li></ul></li><li class="closed"><button aria-label="Declaration Files expand">Declaration Files<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/declaration-files/introduction.html">Introduction</a></li><li><a href="/docs/handbook/declaration-files/by-example.html">Declaration Reference</a></li><li><a href="/docs/handbook/declaration-files/library-structures.html">Library Structures</a></li><li class="closed"><button aria-label=".d.ts Templates expand">.d.ts Templates<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/declaration-files/templates/module-d-ts.html">Modules .d.ts</a></li><li><a href="/docs/handbook/declaration-files/templates/module-plugin-d-ts.html">Module: Plugin</a></li><li><a href="/docs/handbook/declaration-files/templates/module-class-d-ts.html">Module: Class</a></li><li><a href="/docs/handbook/declaration-files/templates/module-function-d-ts.html">Module: Function</a></li><li><a href="/docs/handbook/declaration-files/templates/global-d-ts.html">Global .d.ts</a></li><li><a href="/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html">Global: Modifying Module</a></li></ul></li><li><a href="/docs/handbook/declaration-files/do-s-and-don-ts.html">Do's and Don'ts</a></li><li><a href="/docs/handbook/declaration-files/deep-dive.html">Deep Dive</a></li><li><a href="/docs/handbook/declaration-files/publishing.html">Publishing</a></li><li><a href="/docs/handbook/declaration-files/consumption.html">Consumption</a></li></ul></li><li class="closed"><button aria-label="JavaScript expand">JavaScript<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/intro-to-js-ts.html">JS Projects Utilizing TypeScript</a></li><li><a href="/docs/handbook/type-checking-javascript-files.html">Type Checking JavaScript Files</a></li><li><a href="/docs/handbook/jsdoc-supported-types.html">JSDoc Reference</a></li><li><a href="/docs/handbook/declaration-files/dts-from-js.html">Creating .d.ts Files from .js files</a></li></ul></li><li class="closed"><button aria-label="Project Configuration expand">Project Configuration<span class="open"><svg fill="none" height="9" viewBox="0 0 14 9" width="14" xmlns="http://www.w3.org/2000/svg"><path d="m1 1 6 6 6-6" stroke="#000" stroke-width="2"></path></svg></span><span class="closed"><svg fill="none" height="14" viewBox="0 0 9 14" width="9" xmlns="http://www.w3.org/2000/svg"><path d="m1 13 6-6-6-6" stroke="#000" stroke-width="2"></path></svg></span></button><ul><li><a href="/docs/handbook/tsconfig-json.html">What is a tsconfig.json</a></li><li><a href="/docs/handbook/compiler-options-in-msbuild.html">Compiler Options in MSBuild</a></li><li><a href="/tsconfig">TSConfig Reference</a></li><li><a href="/docs/handbook/compiler-options.html">tsc CLI Options</a></li><li><a href="/docs/handbook/project-references.html">Project References</a></li><li><a href="/docs/handbook/integrating-with-build-tools.html">Integrating with Build Tools</a></li><li><a href="/docs/handbook/configuring-watch.html">Configuring Watch</a></li><li><a href="/docs/handbook/nightly-builds.html">Nightly Builds</a></li></ul></li></ul></nav><div id="handbook-content" role="article"><h2>Conditional Types</h2><article><div class="whitespace raised"><div class="markdown"><p>At the heart of most useful programs, we have to make decisions based on input.
JavaScript programs are no different, but given the fact that values can be easily introspected, those decisions are also based on the types of the inputs.
<em>Conditional types</em> help describe the relation between the types of inputs and outputs.</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Animal">Animal</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp="(method) Animal.live(): void">live</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div><div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Dog">Dog</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Animal">Animal</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp="(method) Dog.woof(): void">woof</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Example1 = number" style="border-bottom: solid 2px lightgrey;">Example1</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="interface Dog">Dog</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Animal">Animal</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #267F99">number</span><span style="color: #000000"> : </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><span class="popover-prefix">        </span><span class="popover"><div class="arrow"></div>type Example1 = number</span>

<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Example2 = string" style="border-bottom: solid 2px lightgrey;">Example2</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="interface RegExp">RegExp</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Animal">Animal</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #267F99">number</span><span style="color: #000000"> : </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><span class="popover-prefix">        </span><span class="popover"><div class="arrow"></div>type Example2 = string</span></code><a href="https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFAFFJcTKZwQAjMgC8yEeKkz5irLmQB+ZBAAV0wAI2hkBjkwKFBRTgB6RJJkAD1-QiMzS2tbewAmF2QAJQhRK1MJaQhZBXRfPECQ8Mjo2PiklJIMoA">Try</a></div></pre>
<p>Conditional types take a form that looks a little like conditional expressions (<code>condition ? trueExpression : falseExpression</code>) in JavaScript:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="type SomeType = any">SomeType</data-lsp></span><span style="color: #000000"> </span><span style="color: #001080">extends</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp="type OtherType = any">OtherType</data-lsp></span><span style="color: #000000"> ? </span><span style="color: #001080"><data-lsp lsp="type TrueType = any">TrueType</data-lsp></span><span style="color: #000000"> : </span><span style="color: #001080"><data-lsp lsp="type FalseType = any">FalseType</data-lsp></span><span style="color: #000000">;</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA">Try</a></div></pre>
<p>When the type on the left of the <code>extends</code> is assignable to the one on the right, then you’ll get the type in the first branch (the “true” branch); otherwise you’ll get the type in the latter branch (the “false” branch).</p>
<p>From the examples above, conditional types might not immediately seem useful - we can tell ourselves whether or not <code>Dog extends Animal</code> and pick <code>number</code> or <code>string</code>!
But the power of conditional types comes from using them with generics.</p>
<p>For example, let’s take the following <code>createLabel</code> function:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface IdLabel">IdLabel</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="(property) IdLabel.id: number">id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000"> </span><span style="color: #008000">/* some fields */</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div><div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface NameLabel">NameLabel</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="(property) NameLabel.name: string">name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> </span><span style="color: #008000">/* other fields */</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function createLabel(id: number): IdLabel (+2 overloads)">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) id: number">id</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp="interface IdLabel">IdLabel</data-lsp></span><span style="color: #000000">;</span></div><div class="line"><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function createLabel(name: string): NameLabel (+2 overloads)">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) name: string">name</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp="interface NameLabel">NameLabel</data-lsp></span><span style="color: #000000">;</span></div><div class="line"><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) nameOrId: string | number">nameOrId</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp="interface IdLabel">IdLabel</data-lsp></span><span style="color: #000000"> | </span><span style="color: #267F99"><data-lsp lsp="interface NameLabel">NameLabel</data-lsp></span><span style="color: #000000">;</span></div><div class="line"><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function createLabel(id: number): IdLabel (+2 overloads)">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) nameOrId: string | number">nameOrId</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp="interface IdLabel">IdLabel</data-lsp></span><span style="color: #000000"> | </span><span style="color: #267F99"><data-lsp lsp="interface NameLabel">NameLabel</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #AF00DB">throw</span><span style="color: #000000"> </span><span style="color: #A31515">"unimplemented"</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div></code><a href="https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbJIw6IBGGA8QyBFAg4SA0CAApKGnomaABKGgwQ-Ck3Dy8fPwCgiETQ3X4DI1M45FV1XAJk909vX39A4PL8XL0AeSgMAuMQMwAfWkZmYoTG5D7S7MbK1JqM+onNZv42ju5C7tH+6KghrBGxvUTiMmRrKB4Ad2QAIndgBgAHfAh+cAh0K+cgA">Try</a></div></pre>
<p>These overloads for createLabel describe a single JavaScript function that makes a choice based on the types of its inputs. Note a few things:</p>
<ol>
<li>If a library has to make the same sort of choice over and over throughout its API, this becomes cumbersome.</li>
<li>We have to create three overloads: one for each case when we’re <em>sure</em> of the type (one for <code>string</code> and one for <code>number</code>), and one for the most general case (taking a <code>string | number</code>). For every new type <code>createLabel</code> can handle, the number of overloads grows exponentially.</li>
</ol>
<p>Instead, we can encode that logic in a conditional type:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type NameOrId&amp;lt;T extends string | number> = T extends number ? IdLabel : NameLabel">NameOrId</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type NameOrId&amp;lt;T extends string | number>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">number</span><span style="color: #000000"> | </span><span style="color: #267F99">string</span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type NameOrId&amp;lt;T extends string | number>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">number</span></div><div class="line"><span style="color: #000000">  ? </span><span style="color: #267F99"><data-lsp lsp="interface IdLabel">IdLabel</data-lsp></span></div><div class="line"><span style="color: #000000">  : </span><span style="color: #267F99"><data-lsp lsp="interface NameLabel">NameLabel</data-lsp></span><span style="color: #000000">;</span></div></code><a href="https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbNatkAWk8I6YT+5JgAJ4ADip6APJQGAA8ACrIEAAekCAitIzMyAA+3EamAHzIALzI8UkpafRM0GTIAPxoWLgEtTSq6s34EkA">Try</a></div></pre>
<p>We can then use that conditional type to simplify out overloads down to a single function with no overloads.</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>">createLabel</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">number</span><span style="color: #000000"> | </span><span style="color: #267F99">string</span><span style="color: #000000">&gt;(</span><span style="color: #001080"><data-lsp lsp="(parameter) idOrName: T extends string | number">idOrName</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>">T</data-lsp></span><span style="color: #000000">): </span><span style="color: #267F99"><data-lsp lsp="type NameOrId&amp;lt;T extends string | number> = T extends number ? IdLabel : NameLabel">NameOrId</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in createLabel&amp;lt;T extends string | number>(idOrName: T): NameOrId&amp;lt;T>">T</data-lsp></span><span style="color: #000000">&gt; {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #AF00DB">throw</span><span style="color: #000000"> </span><span style="color: #A31515">"unimplemented"</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp="let a: NameLabel" style="border-bottom: solid 2px lightgrey;">a</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp="function createLabel&amp;lt;&amp;quot;typescript&amp;quot;>(idOrName: &amp;quot;typescript&amp;quot;): NameLabel">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #A31515">"typescript"</span><span style="color: #000000">);</span></div><span class="popover-prefix">   </span><span class="popover"><div class="arrow"></div>let a: NameLabel</span>

<div class="line"><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp="let b: IdLabel" style="border-bottom: solid 2px lightgrey;">b</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp="function createLabel&amp;lt;2.8>(idOrName: 2.8): IdLabel">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #098658">2.8</span><span style="color: #000000">);</span></div><span class="popover-prefix">   </span><span class="popover"><div class="arrow"></div>let b: IdLabel</span>

<div class="line"><span style="color: #0000FF">let</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp="let c: IdLabel | NameLabel">c</data-lsp></span><span style="color: #000000"> = </span><span style="color: #795E26"><data-lsp lsp="function createLabel&amp;lt;&amp;quot;hello&amp;quot; | 42>(idOrName: &amp;quot;hello&amp;quot; | 42): IdLabel | NameLabel">createLabel</data-lsp></span><span style="color: #000000">(</span><span style="color: #267F99"><data-lsp lsp="var Math: Math">Math</data-lsp></span><span style="color: #000000">.</span><span style="color: #795E26"><data-lsp lsp="(method) Math.random(): number">random</data-lsp></span><span style="color: #000000">() ? </span><span style="color: #A31515">"hello"</span><span style="color: #000000"> : </span><span style="color: #098658">42</span><span style="color: #000000">);</span></div><span class="popover-prefix"></span><span class="popover"><div class="arrow"></div>let c: NameLabel | IdLabel</span></code><a href="https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbLABPAA4q9AeSgYAPAAqyBAAHpAgIrSMzMgAPtxGpgB8yAC8yMFhEVH0TNBkyAD8aFi4BIU0qurl+FKsrMgAtC0IdGAtTSQwdCAIYMA8IMgIUBBwkBoEQSHhEJGiebEJhsYgJskAFJS+1fqZAJRVPn7oQanayNZQPADuyABEvcAM7vgQ-OAQ6A-OJCTvMDIODpEZjCYQKb4TYPNyeLijYDuMAPA71RrIAB6RX+gOQOFBo3Gk1qmwATAA6AAcaJIDXI2NxECBCEJ4JJmk2AFkJlYKVA4JE+JsDsVHjZ8PgeA9kDQACxk2n0rFFIA">Try</a></div></pre>
<h3 id="conditional-type-constraints" style="position:relative;"><a href="#conditional-type-constraints" aria-label="conditional type constraints permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Conditional Type Constraints</h3>
<p>Often, the checks in a conditional type will provide us with some new information.
Just like with narrowing with type guards can give us a more specific type, the true branch of a conditional type will further constraint generics by the type we check against.</p>
<p>For example, let’s take the following:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T> = T[&amp;quot;message&amp;quot;]">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T>">T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T>">T</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">"message"</span><span style="color: #000000">];</span></div><span class="error"><span>Type '"message"' cannot be used to index type 'T'.</span><span class="code">2536</span></span><span class="error-behind">Type '"message"' cannot be used to index type 'T'.</span></code><a href="https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA">Try</a></div></pre>
<p>In this example, TypeScript errors because <code>T</code> isn’t known to have a property called <code>message</code>.
We could constrain <code>T</code>, and TypeScript would no longer complain:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T extends { message: unknown; }> = T[&amp;quot;message&amp;quot;]">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T extends { message: unknown; }>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp="(property) message: unknown">message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unknown</span><span style="color: #000000"> }&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T extends { message: unknown; }>">T</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">"message"</span><span style="color: #000000">];</span></div>
<div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Email">Email</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="(property) Email.message: string">message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Dog">Dog</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp="(method) Dog.bark(): void">bark</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type EmailMessageContents = string" style="border-bottom: solid 2px lightgrey;">EmailMessageContents</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T extends { message: unknown; }> = T[&amp;quot;message&amp;quot;]">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="interface Email">Email</data-lsp></span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">              </span><span class="popover"><div class="arrow"></div>type EmailMessageContents = string</span></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1Ctug0dNQACI8KHYOAEZI+pwAFACUrABuPNrkXlqgkFAWVtZwimgAwjx6ZMBUkvlMGDg5NiKaAPSNDlAAegD8QA">Try</a></div></pre>
<p>However, what if we wanted <code>MessageOf</code> to take any type, and default to something like <code>never</code> if a <code>message</code> property isn’t available?
We can do this by moving the constraint out and introducing a conditional type:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T>">T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> { </span><span style="color: #001080"><data-lsp lsp="(property) message: unknown">message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">unknown</span><span style="color: #000000"> } ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type MessageOf&amp;lt;T>">T</data-lsp></span><span style="color: #000000">[</span><span style="color: #A31515">"message"</span><span style="color: #000000">] : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div>
<div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Email">Email</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="(property) Email.message: string">message</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">interface</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Dog">Dog</data-lsp></span><span style="color: #000000"> {</span></div><div class="line"><span style="color: #000000">  </span><span style="color: #795E26"><data-lsp lsp="(method) Dog.bark(): void">bark</data-lsp></span><span style="color: #000000">(): </span><span style="color: #267F99">void</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #000000">}</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type EmailMessageContents = string" style="border-bottom: solid 2px lightgrey;">EmailMessageContents</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="interface Email">Email</data-lsp></span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">              </span><span class="popover"><div class="arrow"></div>type EmailMessageContents = string</span>

<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type DogMessageContents = never" style="border-bottom: solid 2px lightgrey;">DogMessageContents</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type MessageOf&amp;lt;T> = T extends {&amp;#13;    message: unknown;&amp;#13;} ? T[&amp;quot;message&amp;quot;] : never">MessageOf</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="interface Dog">Dog</data-lsp></span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">             </span><span class="popover"><div class="arrow"></div>type DogMessageContents = never</span></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA">Try</a></div></pre>
<p>Within the true branch, TypeScript knows that <code>T</code> <em>will</em> have a <code>message</code> property.</p>
<p>As another example, we could also write a type called <code>Flatten</code> that flattens array types to their element types, but leaves them alone otherwise:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Flatten&amp;lt;T> = T extends any[] ? T[number] : T">Flatten</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type Flatten&amp;lt;T>">T</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type Flatten&amp;lt;T>">T</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">any</span><span style="color: #000000">[] ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type Flatten&amp;lt;T>">T</data-lsp></span><span style="color: #000000">[</span><span style="color: #267F99">number</span><span style="color: #000000">] : </span><span style="color: #267F99"><data-lsp lsp="(type parameter) T in type Flatten&amp;lt;T>">T</data-lsp></span><span style="color: #000000">;</span></div>
<div class="line"><span style="color: #008000">// Extracts out the element type.</span></div><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Str = string" style="border-bottom: solid 2px lightgrey;">Str</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type Flatten&amp;lt;T> = T extends any[] ? T[number] : T">Flatten</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">string</span><span style="color: #000000">[]&gt;;</span></div><span class="popover-prefix">     </span><span class="popover"><div class="arrow"></div>type Str = string</span>

<div class="line"><span style="color: #008000">// Leaves the type alone.</span></div><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Num = number" style="border-bottom: solid 2px lightgrey;">Num</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type Flatten&amp;lt;T> = T extends any[] ? T[number] : T">Flatten</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">     </span><span class="popover"><div class="arrow"></div>type Num = number</span></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAaAey7AowABbQIcCDzS7QkAHSTL0AMrBB+WImRp0VJwEtUAc2ZsKTkoUIA9VmkQgBkIBAA3CBoDaDtaOE1UCBs0gDleF3gkcnRufiEg2Xlw1iA">Try</a></div></pre>
<p>When <code>Flatten</code> is given an array type, it uses an indexed access with <code>number</code> to fetch out <code>string[]</code>’s element type.
Otherwise, it just returns the type it was given.</p>
<h3 id="inferring-within-conditional-types" style="position:relative;"><a href="#inferring-within-conditional-types" aria-label="inferring within conditional types permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inferring Within Conditional Types</h3>
<p>We just found ourselves using conditional types to apply constraints and then extract out types.
This ends up being such a common operation that conditional types make it easier.</p>
<p>Conditional types provide us with a way to infer from types we compare against in the true branch using the <code>infer</code> keyword.
For example, we could have inferred the element type in <code>Flatten</code> instead of fetching it out “manually” with an indexed access type:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Flatten&amp;lt;Type> = Type extends (infer Item)[] ? Item : Type">Flatten</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type Flatten&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type Flatten&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="interface Array&amp;lt;T>">Array</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #0000FF">infer</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Item">Item</data-lsp></span><span style="color: #000000">&gt; ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Item">Item</data-lsp></span><span style="color: #000000"> : </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type Flatten&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">;</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFXBAfFAXim0iggA8VUATAZygEEAnJhEdAS1QDMImoAkigC2+APyCRUAFzEcAbiA">Try</a></div></pre>
<p>Here, we used the <code>infer</code> keyword to declaratively introduce a new generic type variable named <code>Item</code> instead of specifying how to retrieve the element type of <code>T</code> within the true branch.
This frees us from having to think about how to dig through and probing apart the structure of the types we’re interested in.</p>
<p>We can write some useful helper type aliases using the <code>infer</code> keyword.
For example, for simple cases, we can extract the return type out from function types:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type GetReturnType&amp;lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never">GetReturnType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type GetReturnType&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type GetReturnType&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> (...</span><span style="color: #001080"><data-lsp lsp="(parameter) args: never[]">args</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">never</span><span style="color: #000000">[]) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #0000FF">infer</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Return">Return</data-lsp></span></div><div class="line"><span style="color: #000000">  ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Return">Return</data-lsp></span></div><div class="line"><span style="color: #000000">  : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Num = number" style="border-bottom: solid 2px lightgrey;">Num</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type GetReturnType&amp;lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never">GetReturnType</data-lsp></span><span style="color: #000000">&lt;() </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">     </span><span class="popover"><div class="arrow"></div>type Num = number</span>

<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Str = string" style="border-bottom: solid 2px lightgrey;">Str</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type GetReturnType&amp;lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never">GetReturnType</data-lsp></span><span style="color: #000000">&lt;(</span><span style="color: #001080"><data-lsp lsp="(parameter) x: string">x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">string</span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">     </span><span class="popover"><div class="arrow"></div>type Str = string</span>

<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type Bools = boolean[]" style="border-bottom: solid 2px lightgrey;">Bools</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type GetReturnType&amp;lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never">GetReturnType</data-lsp></span><span style="color: #000000">&lt;(</span><span style="color: #001080"><data-lsp lsp="(parameter) a: boolean">a</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">, </span><span style="color: #001080"><data-lsp lsp="(parameter) b: boolean">b</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">boolean</span><span style="color: #000000">) </span><span style="color: #0000FF">=&gt;</span><span style="color: #000000"> </span><span style="color: #267F99">boolean</span><span style="color: #000000">[]&gt;;</span></div><span class="popover-prefix">      </span><span class="popover"><div class="arrow"></div>type Bools = boolean[]</span></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAebkAfFALxQHQQAewE6AJgM5QAUAdBwIaoDmjAXFHQQAbhFQBtALoBKUsQCW6AGbioSYGnQAoKFAD86lBl1RBwsagDc27aEhQAcsgC2pWPA1aKuFnJLE6K4ARuKENgD0EXpQAHr6tvbQAMrAqO5wiMZYOL5UgoxpSjz+xIWoxeHaUTHxiThQAEIA9s0ANsxkmV4YPiycgsGtbRCc6AA0UMGDw6PopVOzY9JVNXrxQA">Try</a></div></pre>
<p>When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the <em>last</em> signature (which, presumably, is the most permissive catch-all case). It is not possible to perform overload resolution based on a list of argument types.</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">declare</span><span style="color: #000000"> </span><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function stringOrNum(x: string): number (+2 overloads)">stringOrNum</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) x: string">x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000">): </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #0000FF">declare</span><span style="color: #000000"> </span><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function stringOrNum(x: number): string (+2 overloads)">stringOrNum</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) x: number">x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000">;</span></div><div class="line"><span style="color: #0000FF">declare</span><span style="color: #000000"> </span><span style="color: #0000FF">function</span><span style="color: #000000"> </span><span style="color: #795E26"><data-lsp lsp="function stringOrNum(x: string | number): string | number (+2 overloads)">stringOrNum</data-lsp></span><span style="color: #000000">(</span><span style="color: #001080"><data-lsp lsp="(parameter) x: string | number">x</data-lsp></span><span style="color: #000000">: </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">): </span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">;</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type T1 = string | number" style="border-bottom: solid 2px lightgrey;">T1</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type ReturnType&amp;lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any">ReturnType</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #0000FF">typeof</span><span style="color: #000000"> </span><span style="color: #001080"><data-lsp lsp="function stringOrNum(x: string): number (+2 overloads)">stringOrNum</data-lsp></span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">     </span><span class="popover"><div class="arrow"></div>type T1 = string | number</span></code><a href="https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGcMYtUBzAeRgDlkBbACgA8AuQ40sgSjdXoCMQMANwAoUJFgIU6bHnYlyVWo1bw+dQTB4LOYidDhI0mXPiKLKNeszYXO8AD7qBQnffJOXmoWNEYATwAHBAAVAEZ4AF54ACUQDGQYVFDgkAAeQJCcRF0lazoAPjEAehL4CoA9AH4gA">Try</a></div></pre>
<h2 id="distributive-conditional-types" style="position:relative;"><a href="#distributive-conditional-types" aria-label="distributive conditional types permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Distributive Conditional Types</h2>
<p>When conditional types act on a generic type, they become <em>distributive</em> when given a union type.
For example, take the following:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type ToArray&amp;lt;Type> = Type extends any ? Type[] : never">ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">any</span><span style="color: #000000"> ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">[] : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcQA">Try</a></div></pre>
<p>If we plug a union type into <code>ToArray</code>, then the conditional type will be applied to each member of that union.</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type ToArray&amp;lt;Type> = Type extends any ? Type[] : never">ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">&gt; = </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000"> </span><span style="color: #0000FF">extends</span><span style="color: #000000"> </span><span style="color: #267F99">any</span><span style="color: #000000"> ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArray&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">[] : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div>
<div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type StrArrOrNumArr = string[] | number[]" style="border-bottom: solid 2px lightgrey;">StrArrOrNumArr</data-lsp></span><span style="color: #000000"> = </span><span style="color: #267F99"><data-lsp lsp="type ToArray&amp;lt;Type> = Type extends any ? Type[] : never">ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99">string</span><span style="color: #000000"> | </span><span style="color: #267F99">number</span><span style="color: #000000">&gt;;</span></div><span class="popover-prefix">           </span><span class="popover"><div class="arrow"></div>type StrArrOrNumArr = string[] | number[]</span></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKEmhIUAMrAkyJAHkkAOQCuAWxWFYiFOgx0lASyoBzKAB9BugEZjcUgPRuoXgHqsgA">Try</a></div></pre>
<p>What happens here is that <code>StrOrNumArray</code> distributes on:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #000000">  </span><span style="color: #001080">string</span><span style="color: #000000"> | </span><span style="color: #001080">number</span><span style="color: #000000">;</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmUAHyjdcAIwjwA3EA">Try</a></div></pre>
<p>and maps over each member type of the union, to what is effectively:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #000000">  </span><span style="color: #001080"><data-lsp lsp="type ToArray&amp;lt;Type> = Type extends any ? Type[] : never">ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #001080">string</span><span style="color: #000000">&gt; | </span><span style="color: #001080"><data-lsp lsp="type ToArray&amp;lt;Type> = Type extends any ? Type[] : never">ToArray</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #001080">number</span><span style="color: #000000">&gt;;</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKFCQoAZWBJkSAPJIAcgFcAtssKSoUAPRGoAWgsBjTcAtmDsRCnQY6igJZUA5vgA+j5RcqHQAjMVxxIA">Try</a></div></pre>
<p>which leaves us with:</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #000000">  </span><span style="color: #001080">string</span><span style="color: #000000">[] | </span><span style="color: #001080">number</span><span style="color: #000000">[];</span></div></code><a href="https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmA2gF0oAHyjdcAIwjwhAbiA">Try</a></div></pre>
<p>Typically, distributivity is the desired behavior.
To avoid that behavior, you can surround each side of the <code>extends</code> keyword with square brackets.</p>
<pre class="shiki twoslash lsp " style="background-color: #fff; color: black"><div class="code-container"><code><div class="line"><span style="color: #0000FF">type</span><span style="color: #000000"> </span><span style="color: #267F99"><data-lsp lsp="type ToArrayNonDist&amp;lt;Type> = [Type] extends [any] ? Type[] : never">ToArrayNonDist</data-lsp></span><span style="color: #000000">&lt;</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArrayNonDist&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">&gt; = [</span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArrayNonDist&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">] </span><span style="color: #0000FF">extends</span><span style="color: #000000"> [</span><span style="color: #267F99">any</span><span style="color: #000000">] ? </span><span style="color: #267F99"><data-lsp lsp="(type parameter) Type in type ToArrayNonDist&amp;lt;Type>">Type</data-lsp></span><span style="color: #000000">[] : </span><span style="color: #267F99">never</span><span style="color: #000000">;</span></div>

`

export default function Ext() {
    const data = useRef<{ x: number; y: number; wordRange?: Range }>({
        x: 0,
        y: 0,
    })
    const divEl = useRef<HTMLDivElement>(null)

    const handleClick: MouseEventHandler = (e) => {
        let [x, y] = [e.clientX, e.clientY]
        console.log('e: ', e)
        console.log('target: ', e.target)
        console.log('x, y', e.clientX, e.clientY)

        let target = getTargetByPoint(x, y)

        console.log('%cgetTargetByPoint ', 'color:red;', target)

        console.log(
            `%c${target[0]?.textContent?.slice(target[1], target[1] + 1)}`,
            'color: red; font-size: 16px;'
        )
        let selection = getSelection()

        // if (!selection?.anchorNode) return
        // console.log('selection', selection)

        let wordRange = extractWordRange(
            selection?.anchorNode as Text,
            selection?.anchorOffset
        )

        data.current.wordRange = wordRange

        // console.log('extract word range: ', wordRange)
        // console.log(`%cword 「${wordRange.toString()}」`, 'color: red;')

        // let sentenceRange = core.current.extractSentenceRange(
        //     selection?.anchorNode,
        //     selection?.anchorOffset
        // )

        // selection.removeAllRanges()
        // selection.addRange(sentenceRange)

        // console.log('sentence Range', sentenceRange)
        // console.log(`%csentence 「${sentenceRange.toString()}」`, 'color:red;')
    }

    const handleMouseMove: MouseEventHandler = (e) => {
        data.current.x = e.clientX
        data.current.y = e.clientY
    }

    const handleKeyUp: KeyboardEventHandler = (e) => {
        console.log('e', e)
        if (e.code === 'MetaLeft') {
            let target = core.current.getTargetByPoint(
                data.current.x,
                data.current.y
            )

            if (!target[0]) return

            console.log(
                `%c${target[0]?.textContent?.slice(target[1], target[1] + 1)}`,
                'color: red; font-size: 26px;'
            )

            // let wordRange = core.current.extractWordRange(target[0], target[1])
            // console.log(`%cword 「${wordRange.toString()}」`, 'color: red;')
            // let sentenceRange = core.current.extractSentenceRange(
            //     target[0],
            //     target[1]
            // )
            // console.log(
            //     `%csentence 「${sentenceRange.toString()}」`,
            //     'color:red;'
            // )
            // let selection = getSelection()
            // if (selection) {
            //     selection.removeAllRanges()
            //     selection.addRange(sentenceRange)
            // }
        }
    }

    const handleScroll: UIEventHandler = (e) => {
        if (data.current.wordRange && divEl.current) {
            let position = data.current.wordRange.getBoundingClientRect()
            divEl.current.style.top = position.top + 'px'
            divEl.current.style.left = position.left + 'px'
            divEl.current.style.width = position.right - position.left + 'px'
            divEl.current.style.height = position.bottom - position.top + 'px'
        }
    }

    return (
        <div
            onClick={handleClick}
            onMouseMove={handleMouseMove}
            onKeyUp={handleKeyUp}
            style={{
                height: '100vh',
                overflowY: 'auto',
                position: 'relative',
            }}
            onScroll={handleScroll}
        >
            <h1 style={{ fontSize: 60 }}>Ext Experiment</h1>
            <section>
                <div dangerouslySetInnerHTML={{ __html: html }} />
            </section>

            <div
                ref={divEl}
                style={{
                    position: 'fixed',
                    background: 'rgba(255, 200, 200, 0.6)',
                    pointerEvents: 'none',
                }}
            />
        </div>
    )
}
